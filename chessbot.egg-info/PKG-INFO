Metadata-Version: 2.4
Name: chessbot
Version: 0.0.1
Summary: ChessBot: A chess game that allows; People to play against each otheror the computer.
Author-email: Banji Lawal <banji.k.lawal@gmail.com>
License: BSD-3-Clause
Keywords: chess,chess api,chess engine,chess bot
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: colorama>=0.4.6
Requires-Dist: iniconfig>=2.1.0
Requires-Dist: packaging>=25.0
Requires-Dist: pluggy>=1.6.0
Requires-Dist: pygame>=2.6.1
Requires-Dist: Pygments>=2.19.1
Requires-Dist: wheel>=0.45.1
Requires-Dist: setuptools>=80.9.0
Requires-Dist: typing_extensions>=4.14.1
Requires-Dist: build>=1.3.0
Requires-Dist: pydantic>=2.11.7
Provides-Extra: test
Requires-Dist: pytest>=8.4.0; extra == "test"
Requires-Dist: pytest-mock>=4.0.0; extra == "test"

# ChessBot

ChessBot is a Python-based chess engine and interactive game environment designed with a strong emphasis on **clean architecture**, **modularity**, and **extensibility**.
It separates **movement logic**, **piece/rank definitions**, and **board management**, enabling both human-vs-human and AI-vs-human gameplay.

---

## üéØ Goals
- Maintain a clear separation between **game rules** and **board state**.
- Support **AI-driven moves** through destination evaluation logic.
- Enforce **move legality** and **capture rules** through centralized validation.
- Enable **transaction-safe game updates** for undo/redo and rollback.
- Provide a **Pygame-powered interface** for drag-and-drop piece movement.

---

## üèõ Architecture Overview

The design is built around **layered responsibilities**:

### **Core Entities**
- **`ChessPiece`**
 - Holds unique piece ID, immutable `rank`, and `position_history`.
 - Maintains `captured` state.
 - Enforces that the `rank` matches its piece type at construction.
 - Implements capture handling through a `captor` reference.

- **`Rank`**
 - Encapsulates movement rules via `MovementStrategy`.
 - Includes methods like `path_to_coordinate_exists()` and `line_fits_definition()`.
 - Special ranks (e.g., `Pawn`, `King`) implement `RankPromotable` for promotions.

- **`Board`**
 - Stores and manages `Square` objects, each holding coordinates and optional `ChessPiece`.
 - Performs **bounds checking** and manages piece movement/capture.
 - Does not contain game logic ‚Äî purely spatial awareness.

- **`Player`**
 - Identified by ID, name, and `Team`.
 - Team handles prisoners (captured enemy pieces).

- **`CaptureRecord`**
 - Records the prisoner, captor, and capture square for game history.

---

### **Movement & Strategy**
Movement logic is encapsulated in **movement strategy classes**:
- `BishopMovement` ‚Äì diagonal lines.
- `RookMovement` ‚Äì vertical/horizontal lines.
- `KnightMovement` ‚Äì L-shaped jumps.
- `PawnMovement` ‚Äì forward movement with capture diagonals and promotion rules.
- `QueenMovement` ‚Äì union of bishop and rook logic.
- `KingMovement` ‚Äì one-square radius, castling rules.

All movements use **motion definitions** (`DiagonalDefinition`, `VerticalDefinition`, etc.) to check if a line is valid.

---

### **Destination Selection**
The `DestinationSelector` rates legal moves:
- Prioritizes highest-value enemy captures.
- Falls back to random selection when no valuable targets exist.
- Risk assessment may be added in the future.

---

## ‚úÖ Validation & Transactions
- **Move Validation**
 - Prevents friendly fire (cannot capture your own pieces).
 - Ensures destination is within rank‚Äôs movement definition.
 - Verifies path clearance for sliding pieces (rook, bishop, queen).
 - Confirms legality before updating `position_history`.

- **Transaction Management**
 - Every move is wrapped in a transaction-like structure for safe rollback.
 - `TransactionResult` stores method name, outcome, and error details.
 - Supports a one-move-per-player undo system.

---

## üñ• Pygame UI
- Drag-and-drop piece interaction.
- Visual cues for piece type (color-coded shapes).
- Highlighted legal moves (planned feature).
- Adjustable board dimensions via config constants (`CELL_PX`, `BORDER_PX`, `SCREEN_WIDTH`, `SCREEN_HEIGHT`).

---

## üìÇ Project Structure
jfjsjf
